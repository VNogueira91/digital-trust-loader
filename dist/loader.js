"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Loader = exports.DefaultLoaderConfig = void 0;

var _services = require("./services");

var _ui = require("./ui");

var DefaultLoaderConfig = {
  defaultPin: "0000",
  codeFolderName: "code",
  walletTemplateFolderName: "wallet-patch",
  appFolderName: "app",
  appsFolderName: "apps-patch",
  ssiFileName: "seed"
};
exports.DefaultLoaderConfig = DefaultLoaderConfig;

class Loader {
  constructor(config, environment, creationStrategy) {
    var storage = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new _services.LoaderLocalStorage();
    var spinner = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new _ui.LogSpinner();
    var popUp = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new _ui.DefaultPopUp();
    this.config = Object.assign({}, DefaultLoaderConfig, config);
    this.environment = environment;
    this.strategy = creationStrategy;
    this.spinner = spinner;
    this.popUp = popUp;
    this.credentialsManager = new _services.CredentialsManager(environment.appName, storage);

    try {
      var _config = require("opendsu").loadApi("config");

      _config.autoconfigFromEnvironment(environment);
    } catch (e) {
      throw new Error("Could not load OpenDSU framework due to ".concat(e));
    }

    this.navigatorUtils = new _services.NavigatorUtils(environment, spinner, popUp);
    this.walletService = new _services.WalletService(config, this.environment, this.spinner, creationStrategy);
  }

  create(credentials, callback) {
    this.walletService.create(credentials, callback);
  }

  load(credentials, callback) {
    var self = this;
    this.navigatorUtils.unregisterAllServiceWorkers(err => {
      if (err) return callback(err);
      self.walletService.load(credentials, callback);
    });
  }

}

exports.Loader = Loader;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvYWRlci5qcyJdLCJuYW1lcyI6WyJEZWZhdWx0TG9hZGVyQ29uZmlnIiwiZGVmYXVsdFBpbiIsImNvZGVGb2xkZXJOYW1lIiwid2FsbGV0VGVtcGxhdGVGb2xkZXJOYW1lIiwiYXBwRm9sZGVyTmFtZSIsImFwcHNGb2xkZXJOYW1lIiwic3NpRmlsZU5hbWUiLCJMb2FkZXIiLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsImVudmlyb25tZW50IiwiY3JlYXRpb25TdHJhdGVneSIsInN0b3JhZ2UiLCJMb2FkZXJMb2NhbFN0b3JhZ2UiLCJzcGlubmVyIiwiTG9nU3Bpbm5lciIsInBvcFVwIiwiRGVmYXVsdFBvcFVwIiwiT2JqZWN0IiwiYXNzaWduIiwic3RyYXRlZ3kiLCJjcmVkZW50aWFsc01hbmFnZXIiLCJDcmVkZW50aWFsc01hbmFnZXIiLCJhcHBOYW1lIiwicmVxdWlyZSIsImxvYWRBcGkiLCJhdXRvY29uZmlnRnJvbUVudmlyb25tZW50IiwiZSIsIkVycm9yIiwibmF2aWdhdG9yVXRpbHMiLCJOYXZpZ2F0b3JVdGlscyIsIndhbGxldFNlcnZpY2UiLCJXYWxsZXRTZXJ2aWNlIiwiY3JlYXRlIiwiY3JlZGVudGlhbHMiLCJjYWxsYmFjayIsImxvYWQiLCJzZWxmIiwidW5yZWdpc3RlckFsbFNlcnZpY2VXb3JrZXJzIiwiZXJyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ08sSUFBTUEsbUJBQW1CLEdBQUc7QUFDL0JDLEVBQUFBLFVBQVUsRUFBRSxNQURtQjtBQUUvQkMsRUFBQUEsY0FBYyxFQUFFLE1BRmU7QUFHL0JDLEVBQUFBLHdCQUF3QixFQUFFLGNBSEs7QUFJL0JDLEVBQUFBLGFBQWEsRUFBRSxLQUpnQjtBQUsvQkMsRUFBQUEsY0FBYyxFQUFFLFlBTGU7QUFNL0JDLEVBQUFBLFdBQVcsRUFBRTtBQU5rQixDQUE1Qjs7O0FBUUEsTUFBTUMsTUFBTixDQUFhO0FBQ2hCQyxFQUFBQSxXQUFXLENBQUNDLE1BQUQsRUFBU0MsV0FBVCxFQUFzQkMsZ0JBQXRCLEVBQW9JO0FBQUEsUUFBNUZDLE9BQTRGLHVFQUFsRixJQUFJQyw0QkFBSixFQUFrRjtBQUFBLFFBQXhEQyxPQUF3RCx1RUFBOUMsSUFBSUMsY0FBSixFQUE4QztBQUFBLFFBQTVCQyxLQUE0Qix1RUFBcEIsSUFBSUMsZ0JBQUosRUFBb0I7QUFDM0ksU0FBS1IsTUFBTCxHQUFjUyxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCbkIsbUJBQWxCLEVBQXVDUyxNQUF2QyxDQUFkO0FBQ0EsU0FBS0MsV0FBTCxHQUFtQkEsV0FBbkI7QUFDQSxTQUFLVSxRQUFMLEdBQWdCVCxnQkFBaEI7QUFDQSxTQUFLRyxPQUFMLEdBQWVBLE9BQWY7QUFDQSxTQUFLRSxLQUFMLEdBQWFBLEtBQWI7QUFDQSxTQUFLSyxrQkFBTCxHQUEwQixJQUFJQyw0QkFBSixDQUF1QlosV0FBVyxDQUFDYSxPQUFuQyxFQUE0Q1gsT0FBNUMsQ0FBMUI7O0FBQ0EsUUFBSTtBQUNBLFVBQUlILE9BQU0sR0FBR2UsT0FBTyxDQUFDLFNBQUQsQ0FBUCxDQUFtQkMsT0FBbkIsQ0FBMkIsUUFBM0IsQ0FBYjs7QUFDQWhCLE1BQUFBLE9BQU0sQ0FBQ2lCLHlCQUFQLENBQWlDaEIsV0FBakM7QUFDSCxLQUhELENBSUEsT0FBT2lCLENBQVAsRUFBVTtBQUNOLFlBQU0sSUFBSUMsS0FBSixtREFBcURELENBQXJELEVBQU47QUFDSDs7QUFDRCxTQUFLRSxjQUFMLEdBQXNCLElBQUlDLHdCQUFKLENBQW1CcEIsV0FBbkIsRUFBZ0NJLE9BQWhDLEVBQXlDRSxLQUF6QyxDQUF0QjtBQUNBLFNBQUtlLGFBQUwsR0FBcUIsSUFBSUMsdUJBQUosQ0FBa0J2QixNQUFsQixFQUEwQixLQUFLQyxXQUEvQixFQUE0QyxLQUFLSSxPQUFqRCxFQUEwREgsZ0JBQTFELENBQXJCO0FBQ0g7O0FBQ0RzQixFQUFBQSxNQUFNLENBQUNDLFdBQUQsRUFBY0MsUUFBZCxFQUF3QjtBQUMxQixTQUFLSixhQUFMLENBQW1CRSxNQUFuQixDQUEwQkMsV0FBMUIsRUFBdUNDLFFBQXZDO0FBQ0g7O0FBQ0RDLEVBQUFBLElBQUksQ0FBQ0YsV0FBRCxFQUFjQyxRQUFkLEVBQXdCO0FBQ3hCLFFBQU1FLElBQUksR0FBRyxJQUFiO0FBQ0EsU0FBS1IsY0FBTCxDQUFvQlMsMkJBQXBCLENBQWlEQyxHQUFELElBQVM7QUFDckQsVUFBSUEsR0FBSixFQUNJLE9BQU9KLFFBQVEsQ0FBQ0ksR0FBRCxDQUFmO0FBQ0pGLE1BQUFBLElBQUksQ0FBQ04sYUFBTCxDQUFtQkssSUFBbkIsQ0FBd0JGLFdBQXhCLEVBQXFDQyxRQUFyQztBQUNILEtBSkQ7QUFLSDs7QUE1QmUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMb2FkZXJMb2NhbFN0b3JhZ2UsIENyZWRlbnRpYWxzTWFuYWdlciwgV2FsbGV0U2VydmljZSwgTmF2aWdhdG9yVXRpbHMgfSBmcm9tIFwiLi9zZXJ2aWNlc1wiO1xuaW1wb3J0IHsgRGVmYXVsdFBvcFVwLCBMb2dTcGlubmVyIH0gZnJvbSBcIi4vdWlcIjtcbmV4cG9ydCBjb25zdCBEZWZhdWx0TG9hZGVyQ29uZmlnID0ge1xuICAgIGRlZmF1bHRQaW46IFwiMDAwMFwiLFxuICAgIGNvZGVGb2xkZXJOYW1lOiBcImNvZGVcIixcbiAgICB3YWxsZXRUZW1wbGF0ZUZvbGRlck5hbWU6IFwid2FsbGV0LXBhdGNoXCIsXG4gICAgYXBwRm9sZGVyTmFtZTogXCJhcHBcIixcbiAgICBhcHBzRm9sZGVyTmFtZTogXCJhcHBzLXBhdGNoXCIsXG4gICAgc3NpRmlsZU5hbWU6IFwic2VlZFwiXG59O1xuZXhwb3J0IGNsYXNzIExvYWRlciB7XG4gICAgY29uc3RydWN0b3IoY29uZmlnLCBlbnZpcm9ubWVudCwgY3JlYXRpb25TdHJhdGVneSwgc3RvcmFnZSA9IG5ldyBMb2FkZXJMb2NhbFN0b3JhZ2UoKSwgc3Bpbm5lciA9IG5ldyBMb2dTcGlubmVyKCksIHBvcFVwID0gbmV3IERlZmF1bHRQb3BVcCgpKSB7XG4gICAgICAgIHRoaXMuY29uZmlnID0gT2JqZWN0LmFzc2lnbih7fSwgRGVmYXVsdExvYWRlckNvbmZpZywgY29uZmlnKTtcbiAgICAgICAgdGhpcy5lbnZpcm9ubWVudCA9IGVudmlyb25tZW50O1xuICAgICAgICB0aGlzLnN0cmF0ZWd5ID0gY3JlYXRpb25TdHJhdGVneTtcbiAgICAgICAgdGhpcy5zcGlubmVyID0gc3Bpbm5lcjtcbiAgICAgICAgdGhpcy5wb3BVcCA9IHBvcFVwO1xuICAgICAgICB0aGlzLmNyZWRlbnRpYWxzTWFuYWdlciA9IG5ldyBDcmVkZW50aWFsc01hbmFnZXIoZW52aXJvbm1lbnQuYXBwTmFtZSwgc3RvcmFnZSk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgY29uZmlnID0gcmVxdWlyZShcIm9wZW5kc3VcIikubG9hZEFwaShcImNvbmZpZ1wiKTtcbiAgICAgICAgICAgIGNvbmZpZy5hdXRvY29uZmlnRnJvbUVudmlyb25tZW50KGVudmlyb25tZW50KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgbG9hZCBPcGVuRFNVIGZyYW1ld29yayBkdWUgdG8gJHtlfWApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubmF2aWdhdG9yVXRpbHMgPSBuZXcgTmF2aWdhdG9yVXRpbHMoZW52aXJvbm1lbnQsIHNwaW5uZXIsIHBvcFVwKTtcbiAgICAgICAgdGhpcy53YWxsZXRTZXJ2aWNlID0gbmV3IFdhbGxldFNlcnZpY2UoY29uZmlnLCB0aGlzLmVudmlyb25tZW50LCB0aGlzLnNwaW5uZXIsIGNyZWF0aW9uU3RyYXRlZ3kpO1xuICAgIH1cbiAgICBjcmVhdGUoY3JlZGVudGlhbHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMud2FsbGV0U2VydmljZS5jcmVhdGUoY3JlZGVudGlhbHMsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgbG9hZChjcmVkZW50aWFscywgY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIHRoaXMubmF2aWdhdG9yVXRpbHMudW5yZWdpc3RlckFsbFNlcnZpY2VXb3JrZXJzKChlcnIpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICBzZWxmLndhbGxldFNlcnZpY2UubG9hZChjcmVkZW50aWFscywgY2FsbGJhY2spO1xuICAgICAgICB9KTtcbiAgICB9XG59Il0sImZpbGUiOiJsb2FkZXIuanMifQ==
