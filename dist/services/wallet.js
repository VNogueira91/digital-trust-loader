"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WalletService = void 0;

var _FileService = require("./FileService");

class WalletService {
  constructor(config, environment, spinner, creationStrategy) {
    this.creationStrategy = undefined;
    this.creationStrategy = creationStrategy;
    this.config = config;
    this.environment = environment;
    this.spinner = spinner;
    this.fileService = new _FileService.FileService();
  }

  getWalletTemplateContent(callback) {
    this.fileService.getFolderContentAsJSON(this.config.walletTemplateFolderName, (err, data) => {
      if (err) return callback(new Error("Failed to get content for " + this.config.walletTemplateFolderName));
      var content;

      try {
        content = JSON.parse(data);
      } catch (e) {
        return callback(new Error("Failed to parse content for " + this.config.walletTemplateFolderName));
      }

      callback(undefined, content);
    });
  }

  dirSummaryAsArray(walletTemplateContent) {
    var files = [];

    for (var directory in walletTemplateContent) {
      var directoryFiles = walletTemplateContent[directory];

      for (var fileName in directoryFiles) {
        files.push({
          path: directory + "/" + fileName,
          content: directoryFiles[fileName]
        });
      }
    }

    return files;
  }

  customizeDSU(dsu, files, prefix, callback) {
    var self = this;

    if (typeof prefix === "function") {
      callback = prefix;
      prefix = undefined;
    }

    if (files.length === 0) {
      return callback();
    }

    var file = files.pop();
    var targetPath = file.path;

    if (typeof prefix !== 'undefined') {
      targetPath = "".concat(prefix, "/").concat(targetPath);
    }

    var fileContent;

    if (Array.isArray(file.content)) {
      var Buffer = require("buffer").Buffer;

      var arrayBuffer = new Uint8Array(file.content).buffer;
      var buffer = new Buffer(arrayBuffer.byteLength);
      var view = new Uint8Array(arrayBuffer);

      for (var i = 0; i < buffer.length; ++i) {
        buffer[i] = view[i];
      }

      fileContent = buffer;
    } else {
      fileContent = file.content;
    }

    dsu.writeFile(targetPath, fileContent, err => {
      if (err) {
        return callback(new Error("Failed to write file in DSU at path ".concat(targetPath, ", ").concat(err)));
      }

      self.customizeDSU(dsu, files, prefix, callback);
    });
  }

  getListOfAppsForInstallation(callback) {
    var self = this;
    this.fileService.getFolderContentAsJSON(this.config.appsFolderName, function (err, data) {
      if (err) return callback(new Error("Failed to get content for folder ".concat(self.config.appsFolderName, ", ").concat(err)));
      var apps;

      try {
        apps = JSON.parse(data);
      } catch (e) {
        return callback(new Error("Failed to parse content for folder ".concat(self.config.appsFolderName, ", ").concat(err)));
      }

      callback(undefined, apps);
    });
  }

  getSSAppsFromInstallationURL(callback) {
    var url = new URL(window.location.href);
    var searchParams = url.searchParams;
    var apps = {};
    searchParams.forEach((paramValue, paramKey) => {
      if (paramKey === "appName") {
        var seedKey = paramValue + "Seed";
        var appSeed = searchParams.get(seedKey);
        if (appSeed) apps[paramValue] = appSeed;
      }
    });
    if (Object.keys(apps)) return callback(undefined, apps);
    callback();
  }

  buildApp(appName, seed, hasTemplate, callback) {
    if (typeof hasTemplate === "function") {
      callback = hasTemplate;
      hasTemplate = true;
    }

    var self = this;

    var instantiateNewDossier = files => {
      var resolver = require("opendsu").loadApi("resolver");

      var keyssi = require("opendsu").loadApi("keyssi");

      resolver.createDSU(keyssi.createTemplateSeedSSI(self.environment.vaultDomain, undefined, undefined, undefined, self.environment.vault), (err, appDSU) => {
        if (err) return callback(new Error("Failed to create DSU ".concat(err)));
        appDSU.mount('/' + self.config.codeFolderName, seed, err => {
          if (err) return callback(new Error("Failed to mount in /code seedSSI ".concat(seed, ", ").concat(err)));
          self.customizeDSU(appDSU, files, "/".concat(self.config.appFolderName), err => {
            if (err) return callback(new Error("Failed to customize DSU ".concat(err)));
            return appDSU.writeFile("/environment.json", JSON.stringify(self.environment), err => {
              if (err) console.log("Could not write environment file into app", err);
              appDSU.getKeySSIAsString(callback);
            });
          });
        });
      });
    };

    if (hasTemplate) {
      return self.fileService.getFolderContentAsJSON("apps-patch/".concat(appName), (err, data) => {
        var files;

        try {
          files = JSON.parse(data);
        } catch (e) {
          return callback(new Error("Failed to get content for folder" + "apps/".concat(appName) + err));
        }

        files = self.dirSummaryAsArray(files);
        instantiateNewDossier(files);
      });
    }

    instantiateNewDossier([]);
  }

  performInstallation(walletDSU, apps, appsList, callback) {
    if (!appsList.length) {
      return callback();
    }

    var appName = appsList.pop();
    var appInfo = apps[appName];
    if (appName[0] === '/') appName = appName.replace('/', '');
    var self = this;

    var mountApp = newAppSeed => {
      walletDSU.mount('/apps/' + appName, newAppSeed, err => {
        if (err) return callback(new Error("Failed to mount in folder" + "/apps/".concat(appName, ": ").concat(err)));
        self.performInstallation(walletDSU, apps, appsList, callback);
      });
    };

    var hasTemplate = appInfo.hasTemplate;
    var newInstanceIsDemanded = appInfo.newInstance;

    if (newInstanceIsDemanded) {
      return self.buildApp(appName, appInfo.seed, hasTemplate, (err, newAppSeed) => {
        if (err) return callback(new Error("Failed to build app " + "".concat(appName, ": ").concat(err)));
        mountApp(newAppSeed);
      });
    }

    mountApp(appInfo.seed);
  }

  installApplications(walletDSU, callback) {
    var self = this;
    self.getListOfAppsForInstallation((err, apps) => {
      var appsToBeInstalled = apps || {};
      self.getSSAppsFromInstallationURL((err, apps) => {
        var externalAppsList = Object.keys(apps);

        if (externalAppsList.length > 0) {
          externalAppsList.forEach(appName => {
            appsToBeInstalled[appName] = {
              hasTemplate: false,
              newInstance: false,
              seed: apps[appName]
            };
          });
          var landingApp = {
            name: externalAppsList[0]
          };
          walletDSU.writeFile("".concat(self.config.appsFolderName, "/.landingApp"), JSON.stringify(landingApp), () => {
            console.log("Written landingApp [".concat(landingApp.name, "]. "));
          });
        }
      });
      var appsList = Object.keys(appsToBeInstalled);

      if (appsList.length === 0) {
        return callback();
      }

      console.log('Installing the following applications: ', appsToBeInstalled, appsList);
      self.performInstallation(walletDSU, appsToBeInstalled, appsList, callback);
    });
  }

  install(wallet, files, callback) {
    var self = this;
    files = this.dirSummaryAsArray(files);
    this.customizeDSU(wallet, files, "/".concat(this.config.appFolderName), err => {
      if (err) return callback(new Error("Failed to customize DSU: ".concat(err)));
      self.installApplications(wallet, callback);
    });
  }

  create(credentials, callback) {
    if (this.creationStrategy) return this.creationStrategy(this.environment.vaultDomain, credentials, this.spinner, function (err) {
      if (err) console.error("Wallet creation strategy failed:", err);

      for (var _len = arguments.length, results = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        results[_key - 1] = arguments[_key];
      }

      callback(err, ...results);
    });

    var resolver = require("opendsu").loadApi("resolver");

    var keySSISpace = require("opendsu").loadApi("keyssi");

    var {
      vaultDomain,
      vault
    } = this.environment;
    var self = this;

    var build = function build() {
      var {
        walletTemplateFolderName,
        ssiFileName
      } = self.config;
      self.fileService.getFile(walletTemplateFolderName + "/" + ssiFileName, (err, dsuType) => {
        if (err) return callback(err);
        resolver.createDSU(keySSISpace.createTemplateWalletSSI(vaultDomain, credentials, vault), {
          useSSIAsIdentifier: true,
          dsuTypeSSI: dsuType,
          walletKeySSI: self.config.walletKeySSI
        }, (err, walletDSU) => {
          if (err) return callback(err);
          walletDSU = walletDSU.getWritableDSU();
          self.getWalletTemplateContent((err, files) => {
            if (err) return callback(err);
            files['/'][self.config.ssiFileName] = undefined;
            delete files['/'][self.config.ssiFileName];

            if (!self.config.walletKeySSI) {
              self.install(walletDSU, files, err => {
                if (err) return callback(new Error("Failed to install: ".concat(err)));
                return walletDSU.writeFile("/environment.json", JSON.stringify(self.environment), err => {
                  if (err) return callback(new Error("Could not write Environment file into wallet."));
                  callback(undefined, walletDSU);
                });
              });
            } else {
              callback(undefined, walletDSU);
            }
          });
        });
      });
    };

    resolver.loadDSU(keySSISpace.createTemplateWalletSSI(vaultDomain, credentials, vault), (err, walletDSU) => {
      if (err) {
        build();
      } else {
        console.log("Possible security issue. It is ok during development if you use the same credentials. Just do a npm run clean to remove APIHub cache in this case...");
        walletDSU = walletDSU.getWritableDSU();
        callback(err, walletDSU);
      }
    });
  }

  load(credentials, callback) {
    var resolver = require("opendsu").loadApi("resolver");

    var keyssi = require("opendsu").loadApi("keyssi");

    var {
      vaultDomain,
      vault
    } = this.environment;
    var walletSSI = keyssi.createTemplateWalletSSI(vaultDomain, credentials, vault);
    resolver.loadDSU(walletSSI, (err, constDSU) => {
      if (err) {
        console.error(err);
        return callback(new Error("Failed to load wallet"));
      }

      callback(undefined, constDSU.getWritableDSU());
    });
  }

  retrieve() {}

  changePassword() {}

}

exports.WalletService = WalletService;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
