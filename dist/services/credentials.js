"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CredentialsManager = void 0;

var _utils = require("./utils");

var _storage = require("./storage");

var _constants = require("./constants");

class CredentialsManager {
  constructor(appName, storage) {
    this.appName = appName;
    this.storage = storage || new _storage.LoaderLocalStorage();
  }

  getCredentialsKey() {
    return this.appName + _constants.StorageKeys.CREDENTIALS;
  }

  getPinCodeKey() {
    return this.appName + _constants.StorageKeys.PINCODE;
  }

  saveCredentials(pinCode, credentials) {
    var encryptedCredentials = (0, _utils.encrypt)(pinCode, credentials);
    this.storage.setItem(this.getCredentialsKey(), encryptedCredentials);
  }

  savePinCode(pinCode, credentials) {
    var encryptedCredentials = (0, _utils.encrypt)(pinCode, credentials);
    this.storage.setItem(pinCode, encryptedCredentials);
    this.addPin(pinCode);
  }

  addPin(pinCode) {
    var pinArr = this.storage.getItem(this.getPinCodeKey());

    if (!pinArr) {
      pinArr = [pinCode];
    } else {
      pinArr = JSON.parse(pinArr);
      pinArr.push(pinCode);
    }

    this.storage.setItem(this.getPinCodeKey(), JSON.stringify(pinArr));
  }

  removePin(pinCode) {
    var pinArr = this.storage.getItem(this.getPinCodeKey());

    if (pinArr) {
      pinArr = JSON.parse(pinArr);
      pinArr = pinArr.filter(elem => elem !== pinCode);
      this.storage.setItem(this.getPinCodeKey(), JSON.stringify(pinArr));
    } else {
      throw new Error("No pin found");
    }
  }

  loadPinCodeCredentials(pinCode) {
    var pinCodeCredentials = this.storage.getItem(pinCode);

    if (!pinCodeCredentials) {
      pinCodeCredentials = {};
    } else {
      pinCodeCredentials = (0, _utils.decrypt)(pinCode, pinCodeCredentials);
    }

    return pinCodeCredentials;
  }

  changePinCode(newPin, oldPin) {
    var pinCredentials = this.storage.getItem(oldPin);
    if (!pinCredentials) throw new Error("Could not find a stored pin");
    this.storage.setItem(newPin, pinCredentials);
    this.storage.removeItem(oldPin);
  }

  hasPinCodes() {
    return !!this.storage.getItem(this.getPinCodeKey());
  }

  getLastPinCode() {
    var pinArr = this.storage.getItem(this.getPinCodeKey());

    if (!pinArr) {
      return;
    } else {
      var arr = JSON.parse(pinArr);
      return arr[arr.length - 1];
    }
  }

  pinCodeExists(pinCode) {
    var pinArr = this.storage.getItem(this.getPinCodeKey());

    if (!pinArr) {
      return false;
    } else {
      return pinArr.indexOf(pinCode) >= 0;
    }
  }

  loadCredentials(defaultPin) {
    var knownCredentials = this.storage.getItem(this.getCredentialsKey());
    if (!knownCredentials) return {};else return (0, _utils.decrypt)(defaultPin, knownCredentials);
  }

  clearCredentials() {
    this.storage.removeItem(this.getCredentialsKey());
  }

}

exports.CredentialsManager = CredentialsManager;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
