"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decrypt = decrypt;
exports.encrypt = encrypt;
exports.generateRandom = generateRandom;
exports.getLoginByMode = getLoginByMode;
exports.runInAutoLogin = runInAutoLogin;

var _types = require("../types");

var _constants = require("./constants");

function encrypt(key, dataObj) {
  try {
    var crypto = require('opendsu').loadApi('crypto');

    var encryptionKey = crypto.deriveEncryptionKey(key);
    var encryptedCredentials = crypto.encrypt(JSON.stringify(dataObj), encryptionKey);
    return JSON.stringify(encryptedCredentials);
  } catch (e) {
    throw e;
  }
}

function decrypt(key, dataObj) {
  try {
    var crypto = require('opendsu').loadApi('crypto');

    var encryptionKey = crypto.deriveEncryptionKey(key);
    var decryptData = crypto.decrypt($$.Buffer.from(JSON.parse(dataObj)), encryptionKey);
    return JSON.parse(decryptData.toString());
  } catch (e) {
    throw e;
  }
}

function generateRandom(charactersSet, length) {
  var result = '';
  var charactersLength = charactersSet.length;

  for (var i = 0; i < length; i++) {
    result += charactersSet.charAt(Math.floor(Math.random() * charactersLength));
  }

  return result;
}

var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';

function getSecretLocalToken(storage, development, mobile, storageKey) {
  if (mobile) return "SuperUserSecurePassword1!";
  if (typeof storageKey === "undefined") storageKey = "secretToken";
  if (development) return generateRandom(characters, 32);
  var secret = storage.getItem(storageKey);

  if (!secret) {
    secret = generateRandom(characters, 32);
    storage.setItem(storageKey, secret);
  }

  return secret;
}

function runInAutoLogin(credentials, config, storage, credentialsManager, walletService, development, mobile, callback) {
  credentials = [getSecretLocalToken(storage, development, mobile)];
  walletService.create(credentials, (err, wallet) => {
    if (err) return callback(err);
    if (!development) credentialsManager.saveCredentials(config.defaultPin, credentials);
    wallet.writeFile(_constants.LoaderConstants.USER_DETAILS_FILE, JSON.stringify(credentials), err => {
      if (err) return callback(err);
      console.log("A new wallet got initialised...", wallet.getCreationSSI(true));
      callback();
    });
  });
}

function getLoginByMode(environment, config, credentialsManager, storage) {
  switch (environment.mode) {
    case _types.LoaderMode.EXTERNAL_AUTO:
      return (credentials, walletService, spinner, callback) => {
        try {
          if (!config.defaultPin) return callback(new Error("Missing a default pin"));
          credentials = Object.values(credentialsManager.loadCredentials(config.defaultPin));
        } catch (e) {
          return callback(e);
        }

        walletService.create(credentials, (err, wallet) => {
          if (err) return callback(err);
          console.log("A new wallet got initialised...", wallet.getCreationSSI(true));
          callback(undefined, wallet);
        });
      };

    case _types.LoaderMode.DEV_AUTO:
      return (credentials, walletService, spinner, callback) => {
        runInAutoLogin(credentials, config, storage, credentialsManager, walletService, true, false, callback);
      };

    case _types.LoaderMode.MOBILE_AUTO:
      return (credentials, walletService, spinner, callback) => {
        runInAutoLogin(credentials, config, storage, credentialsManager, walletService, false, true, callback);
      };

    case _types.LoaderMode.AUTO:
      return (credentials, walletService, spinner, callback) => {
        runInAutoLogin(credentials, config, storage, credentialsManager, walletService, false, false, callback);
      };

    case _types.LoaderMode.DEV_SECURE:
    case _types.LoaderMode.SECURE:
    default:
      return undefined;
  }
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
