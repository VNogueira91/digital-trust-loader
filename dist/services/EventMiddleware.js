"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EventMiddleWare = void 0;

class EventMiddleWare {
  constructor(iframe, identity) {
    this.queriesHandlers = {};
    this.statusesHandlers = {};
    this.identity = identity;
    this.iframe = iframe;
    window.document.addEventListener(this.identity, this.handleEvent.bind(this));
  }

  handleEvent(event) {
    var data = event.detail || {};

    if (typeof data.query === "string") {
      if (!this.queriesHandlers[data.query]) {
        console.error("Error: Query [".concat(data.query, " could not be resolved. Did you added registered a handler for it?]"));
        return;
      }

      var handlerResponse = this.queriesHandlers[data.query](data);
      if (!(handlerResponse instanceof Promise)) handlerResponse = Promise.resolve(handlerResponse);
      return handlerResponse.then(responseData => {
        var w = this.iframe.contentWindow;
        if (!w) throw new Error("Could not finds IFrame's content window to bind identity ".concat(responseData));
        w.document.dispatchEvent(new CustomEvent(this.identity, {
          detail: responseData
        }));
      });
    }

    if (typeof data.status === "string") {
      if (!this.statusesHandlers[data.status]) {
        console.error("Error: Status [".concat(data.status, " could not be resolved. Did you added registered a handler for it?]"));
        return;
      }

      return this.statusesHandlers[data.status](data);
    }
  }

  registerQuery(query, handler) {
    if (typeof handler !== "function") throw new Error("[EventMiddleware.reqisterQuery] Handler is not a function");
    this.queriesHandlers[query] = handler;
  }

  unregisterQuery(query) {
    if (this.queriesHandlers[query]) delete this.queriesHandlers[query];
  }

  onStatus(status, handler) {
    if (typeof handler !== "function") throw new Error("[EventMiddleware.onStatus] Handler is not a function");
    this.statusesHandlers[status] = handler;
  }

  offStatus(status) {
    if (this.statusesHandlers[status]) delete this.statusesHandlers[status];
  }

}

exports.EventMiddleWare = EventMiddleWare;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL0V2ZW50TWlkZGxld2FyZS5qcyJdLCJuYW1lcyI6WyJFdmVudE1pZGRsZVdhcmUiLCJjb25zdHJ1Y3RvciIsImlmcmFtZSIsImlkZW50aXR5IiwicXVlcmllc0hhbmRsZXJzIiwic3RhdHVzZXNIYW5kbGVycyIsIndpbmRvdyIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZUV2ZW50IiwiYmluZCIsImV2ZW50IiwiZGF0YSIsImRldGFpbCIsInF1ZXJ5IiwiY29uc29sZSIsImVycm9yIiwiaGFuZGxlclJlc3BvbnNlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aGVuIiwicmVzcG9uc2VEYXRhIiwidyIsImNvbnRlbnRXaW5kb3ciLCJFcnJvciIsImRpc3BhdGNoRXZlbnQiLCJDdXN0b21FdmVudCIsInN0YXR1cyIsInJlZ2lzdGVyUXVlcnkiLCJoYW5kbGVyIiwidW5yZWdpc3RlclF1ZXJ5Iiwib25TdGF0dXMiLCJvZmZTdGF0dXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBTyxNQUFNQSxlQUFOLENBQXNCO0FBQ3pCQyxFQUFBQSxXQUFXLENBQUNDLE1BQUQsRUFBU0MsUUFBVCxFQUFtQjtBQUMxQixTQUFLQyxlQUFMLEdBQXVCLEVBQXZCO0FBQ0EsU0FBS0MsZ0JBQUwsR0FBd0IsRUFBeEI7QUFDQSxTQUFLRixRQUFMLEdBQWdCQSxRQUFoQjtBQUNBLFNBQUtELE1BQUwsR0FBY0EsTUFBZDtBQUNBSSxJQUFBQSxNQUFNLENBQUNDLFFBQVAsQ0FBZ0JDLGdCQUFoQixDQUFpQyxLQUFLTCxRQUF0QyxFQUFnRCxLQUFLTSxXQUFMLENBQWlCQyxJQUFqQixDQUFzQixJQUF0QixDQUFoRDtBQUNIOztBQUNERCxFQUFBQSxXQUFXLENBQUNFLEtBQUQsRUFBUTtBQUNmLFFBQU1DLElBQUksR0FBR0QsS0FBSyxDQUFDRSxNQUFOLElBQWdCLEVBQTdCOztBQUNBLFFBQUksT0FBT0QsSUFBSSxDQUFDRSxLQUFaLEtBQXNCLFFBQTFCLEVBQW9DO0FBQ2hDLFVBQUksQ0FBQyxLQUFLVixlQUFMLENBQXFCUSxJQUFJLENBQUNFLEtBQTFCLENBQUwsRUFBdUM7QUFDbkNDLFFBQUFBLE9BQU8sQ0FBQ0MsS0FBUix5QkFBK0JKLElBQUksQ0FBQ0UsS0FBcEM7QUFDQTtBQUNIOztBQUNELFVBQUlHLGVBQWUsR0FBRyxLQUFLYixlQUFMLENBQXFCUSxJQUFJLENBQUNFLEtBQTFCLEVBQWlDRixJQUFqQyxDQUF0QjtBQUNBLFVBQUksRUFBRUssZUFBZSxZQUFZQyxPQUE3QixDQUFKLEVBQ0lELGVBQWUsR0FBR0MsT0FBTyxDQUFDQyxPQUFSLENBQWdCRixlQUFoQixDQUFsQjtBQUNKLGFBQU9BLGVBQWUsQ0FBQ0csSUFBaEIsQ0FBc0JDLFlBQUQsSUFBa0I7QUFDMUMsWUFBTUMsQ0FBQyxHQUFHLEtBQUtwQixNQUFMLENBQVlxQixhQUF0QjtBQUNBLFlBQUksQ0FBQ0QsQ0FBTCxFQUNJLE1BQU0sSUFBSUUsS0FBSixvRUFBc0VILFlBQXRFLEVBQU47QUFDSkMsUUFBQUEsQ0FBQyxDQUFDZixRQUFGLENBQVdrQixhQUFYLENBQXlCLElBQUlDLFdBQUosQ0FBZ0IsS0FBS3ZCLFFBQXJCLEVBQStCO0FBQ3BEVSxVQUFBQSxNQUFNLEVBQUVRO0FBRDRDLFNBQS9CLENBQXpCO0FBR0gsT0FQTSxDQUFQO0FBUUg7O0FBQ0QsUUFBSSxPQUFPVCxJQUFJLENBQUNlLE1BQVosS0FBdUIsUUFBM0IsRUFBcUM7QUFDakMsVUFBSSxDQUFDLEtBQUt0QixnQkFBTCxDQUFzQk8sSUFBSSxDQUFDZSxNQUEzQixDQUFMLEVBQXlDO0FBQ3JDWixRQUFBQSxPQUFPLENBQUNDLEtBQVIsMEJBQWdDSixJQUFJLENBQUNlLE1BQXJDO0FBQ0E7QUFDSDs7QUFDRCxhQUFPLEtBQUt0QixnQkFBTCxDQUFzQk8sSUFBSSxDQUFDZSxNQUEzQixFQUFtQ2YsSUFBbkMsQ0FBUDtBQUNIO0FBQ0o7O0FBQ0RnQixFQUFBQSxhQUFhLENBQUNkLEtBQUQsRUFBUWUsT0FBUixFQUFpQjtBQUMxQixRQUFJLE9BQU9BLE9BQVAsS0FBbUIsVUFBdkIsRUFDSSxNQUFNLElBQUlMLEtBQUosQ0FBVSwyREFBVixDQUFOO0FBQ0osU0FBS3BCLGVBQUwsQ0FBcUJVLEtBQXJCLElBQThCZSxPQUE5QjtBQUNIOztBQUVEQyxFQUFBQSxlQUFlLENBQUNoQixLQUFELEVBQVE7QUFDbkIsUUFBSSxLQUFLVixlQUFMLENBQXFCVSxLQUFyQixDQUFKLEVBQ0ksT0FBTyxLQUFLVixlQUFMLENBQXFCVSxLQUFyQixDQUFQO0FBQ1A7O0FBRURpQixFQUFBQSxRQUFRLENBQUNKLE1BQUQsRUFBU0UsT0FBVCxFQUFrQjtBQUN0QixRQUFJLE9BQU9BLE9BQVAsS0FBbUIsVUFBdkIsRUFDSSxNQUFNLElBQUlMLEtBQUosQ0FBVSxzREFBVixDQUFOO0FBQ0osU0FBS25CLGdCQUFMLENBQXNCc0IsTUFBdEIsSUFBZ0NFLE9BQWhDO0FBQ0g7O0FBRURHLEVBQUFBLFNBQVMsQ0FBQ0wsTUFBRCxFQUFTO0FBQ2QsUUFBSSxLQUFLdEIsZ0JBQUwsQ0FBc0JzQixNQUF0QixDQUFKLEVBQ0ksT0FBTyxLQUFLdEIsZ0JBQUwsQ0FBc0JzQixNQUF0QixDQUFQO0FBQ1A7O0FBdkR3QiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBFdmVudE1pZGRsZVdhcmUge1xuICAgIGNvbnN0cnVjdG9yKGlmcmFtZSwgaWRlbnRpdHkpIHtcbiAgICAgICAgdGhpcy5xdWVyaWVzSGFuZGxlcnMgPSB7fTtcbiAgICAgICAgdGhpcy5zdGF0dXNlc0hhbmRsZXJzID0ge307XG4gICAgICAgIHRoaXMuaWRlbnRpdHkgPSBpZGVudGl0eTtcbiAgICAgICAgdGhpcy5pZnJhbWUgPSBpZnJhbWU7XG4gICAgICAgIHdpbmRvdy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHRoaXMuaWRlbnRpdHksIHRoaXMuaGFuZGxlRXZlbnQuYmluZCh0aGlzKSk7XG4gICAgfVxuICAgIGhhbmRsZUV2ZW50KGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBldmVudC5kZXRhaWwgfHwge307XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YS5xdWVyeSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnF1ZXJpZXNIYW5kbGVyc1tkYXRhLnF1ZXJ5XSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yOiBRdWVyeSBbJHtkYXRhLnF1ZXJ5fSBjb3VsZCBub3QgYmUgcmVzb2x2ZWQuIERpZCB5b3UgYWRkZWQgcmVnaXN0ZXJlZCBhIGhhbmRsZXIgZm9yIGl0P11gKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgaGFuZGxlclJlc3BvbnNlID0gdGhpcy5xdWVyaWVzSGFuZGxlcnNbZGF0YS5xdWVyeV0oZGF0YSk7XG4gICAgICAgICAgICBpZiAoIShoYW5kbGVyUmVzcG9uc2UgaW5zdGFuY2VvZiBQcm9taXNlKSlcbiAgICAgICAgICAgICAgICBoYW5kbGVyUmVzcG9uc2UgPSBQcm9taXNlLnJlc29sdmUoaGFuZGxlclJlc3BvbnNlKTtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVyUmVzcG9uc2UudGhlbigocmVzcG9uc2VEYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdyA9IHRoaXMuaWZyYW1lLmNvbnRlbnRXaW5kb3c7XG4gICAgICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBmaW5kcyBJRnJhbWUncyBjb250ZW50IHdpbmRvdyB0byBiaW5kIGlkZW50aXR5ICR7cmVzcG9uc2VEYXRhfWApO1xuICAgICAgICAgICAgICAgIHcuZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQodGhpcy5pZGVudGl0eSwge1xuICAgICAgICAgICAgICAgICAgICBkZXRhaWw6IHJlc3BvbnNlRGF0YVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YS5zdGF0dXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5zdGF0dXNlc0hhbmRsZXJzW2RhdGEuc3RhdHVzXSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yOiBTdGF0dXMgWyR7ZGF0YS5zdGF0dXN9IGNvdWxkIG5vdCBiZSByZXNvbHZlZC4gRGlkIHlvdSBhZGRlZCByZWdpc3RlcmVkIGEgaGFuZGxlciBmb3IgaXQ/XWApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXR1c2VzSGFuZGxlcnNbZGF0YS5zdGF0dXNdKGRhdGEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlZ2lzdGVyUXVlcnkocXVlcnksIGhhbmRsZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbRXZlbnRNaWRkbGV3YXJlLnJlcWlzdGVyUXVlcnldIEhhbmRsZXIgaXMgbm90IGEgZnVuY3Rpb25cIik7XG4gICAgICAgIHRoaXMucXVlcmllc0hhbmRsZXJzW3F1ZXJ5XSA9IGhhbmRsZXI7XG4gICAgfVxuICAgIDtcbiAgICB1bnJlZ2lzdGVyUXVlcnkocXVlcnkpIHtcbiAgICAgICAgaWYgKHRoaXMucXVlcmllc0hhbmRsZXJzW3F1ZXJ5XSlcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnF1ZXJpZXNIYW5kbGVyc1txdWVyeV07XG4gICAgfVxuICAgIDtcbiAgICBvblN0YXR1cyhzdGF0dXMsIGhhbmRsZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbRXZlbnRNaWRkbGV3YXJlLm9uU3RhdHVzXSBIYW5kbGVyIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuICAgICAgICB0aGlzLnN0YXR1c2VzSGFuZGxlcnNbc3RhdHVzXSA9IGhhbmRsZXI7XG4gICAgfVxuICAgIDtcbiAgICBvZmZTdGF0dXMoc3RhdHVzKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXR1c2VzSGFuZGxlcnNbc3RhdHVzXSlcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnN0YXR1c2VzSGFuZGxlcnNbc3RhdHVzXTtcbiAgICB9XG4gICAgO1xufSJdLCJmaWxlIjoic2VydmljZXMvRXZlbnRNaWRkbGV3YXJlLmpzIn0=
