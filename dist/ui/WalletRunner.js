"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WalletRunner = void 0;

var _constants = require("./constants");

var _services = require("../services");

var _EventMiddleware = require("../services/EventMiddleware");

var _constants2 = require("../services/constants");

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

class WalletRunner {
  constructor(seed, storage, spinner, popUp) {
    this.seed = seed;
    this.crypto = require('opendsu').loadApi('crypto');
    this.hash = this.crypto.sha256(this.seed);
    this.spinner = spinner;
    this.popUp = popUp;
    this.storage = storage;
  }

  getIframeBase() {
    var iPath = window.location.pathname;
    return iPath.split("loader/")[0] + "loader/iframe/";
  }

  createTimerElement() {
    var script = document.createElement('script');
    script.src = './Timer.js';
    return script;
  }

  createContainerIFrame(useSeedForIFrameSource) {
    var iframe = document.createElement('iframe');
    Object.entries(_constants.IFRAME_DEFS.ATTRIBUTES).forEach(_ref => {
      var [key, value] = _ref;
      return iframe.setAttribute(key, value);
    });
    Object.entries(_constants.IFRAME_DEFS.STYLE).forEach(_ref2 => {
      var [key, value] = _ref2;
      return iframe.style[key] = value;
    });
    iframe.src = window.location.origin + this.getIframeBase() + (useSeedForIFrameSource ? this.seed : this.hash);
    return iframe;
  }

  removeElementsFromUI(iframe, removeSpinner, removeIFrame, removeRest) {
    if (removeIFrame && removeSpinner && removeRest) {
      document.body.innerHTML = '';
      return;
    }

    if (removeIFrame) iframe.remove();
    if (removeSpinner) this.spinner.remove();
    if (removeRest) try {
      document.querySelectorAll("body > *:not(iframe):not(.loader-parent-container)").forEach(node => node.remove());
    } catch (e) {}
  }

  setupLoadEventsListener(navigatorUtils, iframe) {
    var eventMiddleware = new _EventMiddleware.EventMiddleWare(iframe, this.hash);
    var self = this;
    eventMiddleware.registerQuery(_constants2.ServiceWorkerConstants.QUERIES.SEED, () => {
      return {
        seed: self.seed
      };
    });
    eventMiddleware.onStatus(_constants2.ServiceWorkerConstants.STATE.COMPLETED, () => {
      if (iframe.hasAttribute("app-placeholder")) {
        self.removeElementsFromUI(iframe, true, false, false);
        iframe.removeAttribute("app-placeholder");
        document.body.prepend(iframe);
        return;
      }

      self.removeElementsFromUI(iframe, false, true, false);
      iframe.hidden = false;
    });
    eventMiddleware.onStatus(_constants2.ServiceWorkerConstants.STATE.SIGN_OUT, data => {
      navigatorUtils.unregisterAllServiceWorkers(err => {
        if (data.deleteSeed) self.storage.removeItem(_constants2.StorageKeys.SEED_CAGE);
        window.location.reload();
      });
    });
    eventMiddleware.onStatus(_constants2.ServiceWorkerConstants.STATE.ERROR, () => {
      throw new _services.ServiceWorkerError("Unable to load application");
    });
    iframe.hidden = true;
  }

  sendCompletedEvent(iframe) {
    var iframeDocument = iframe.contentDocument || (iframe.contentWindow ? iframe.contentWindow.document : undefined);
    if (!iframeDocument) throw new _services.ServiceWorkerError("Could not find Iframe document");

    if (iframeDocument.readyState !== _constants2.ServiceWorkerConstants.STATE.COMPLETE) {
      console.log('Event "completed" can be emitted only when iframe is loaded!');
      return;
    }

    var iframeIdentity = iframe.getAttribute('identity');

    if (!iframeIdentity) {
      console.log('Event "completed" can not be emitted if no identity was found!');
      return;
    }

    var completedEvent = new CustomEvent(iframeIdentity, {
      detail: {
        status: _constants2.ServiceWorkerConstants.STATE.COMPLETED
      }
    });
    document.dispatchEvent(completedEvent);
  }

  setupSeedRequestListener(navigatorUtils) {
    navigatorUtils.addServiceWorkerEventListener(_constants2.ServiceWorkerConstants.EVENTS.MESSAGE, e => {
      if (!e.data || e.data.query !== "seed") {
        return;
      }

      var swWorkerIdentity = e.data.identity;

      if (swWorkerIdentity === this.hash) {
        e.source.postMessage({
          seed: this.seed
        });
      }
    });
  }

  setupProgressListener() {
    document.addEventListener(_constants2.ServiceWorkerConstants.EVENTS.PROGRESS, e => __awaiter(this, void 0, void 0, function* () {
      var {
        progress,
        status
      } = e.detail;

      if (progress === 100) {
        yield this.spinner.remove();
        return;
      }

      if (this.spinner.isVisible()) yield this.spinner.update(status);else yield this.spinner.show(status);
    }));
  }

  run(navigatorUtils) {
    return __awaiter(this, void 0, void 0, function* () {
      if (navigatorUtils.areServiceWorkersEnabled() && !navigatorUtils.areServiceWorkersSupported()) return this.popUp.ask("Your current browser doe's support this application");
      var iframe = this.createContainerIFrame(!navigatorUtils.areServiceWorkersEnabled());
      this.setupLoadEventsListener(navigatorUtils, iframe);
      var self = this;

      if (navigatorUtils.areServiceWorkersEnabled()) {
        var loadingInterval,
            loadingProgress = 10;
        yield this.spinner.show("Loading Application");
        iframe.addEventListener(_constants2.ServiceWorkerConstants.EVENTS.LOAD, () => {
          self.sendCompletedEvent(iframe);
        });
        document.appendChild(iframe);
        var timer = this.createTimerElement();
        document.appendChild(timer);
        navigatorUtils.registerPwaServiceWorker();
        return;
      }

      this.setupSeedRequestListener(navigatorUtils);
      this.setupProgressListener();
      navigatorUtils.unregisterAllServiceWorkers(() => {
        navigatorUtils.registerServiceWorker({
          name: "swLoader.js",
          path: "swLoader.js",
          scope: self.getIframeBase()
        }, err => {
          if (err) throw err;
          iframe.addEventListener(_constants2.ServiceWorkerConstants.EVENTS.LOAD, () => {
            navigatorUtils.registerPwaServiceWorker();
            self.sendCompletedEvent(iframe);
          });
          document.body.appendChild(iframe);
        });
      });
    });
  }

}

exports.WalletRunner = WalletRunner;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
